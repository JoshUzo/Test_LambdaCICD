name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run Security, Fuzzy Matching, and Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        
      # Install Bandit for Python security checks
      - name: Install Bandit
        run: |
          python -m pip install bandit

      # Run Bandit Security Scan for Python code and output to a file
      - name: Run Bandit Security Scan for Python code
        run: |
          bandit -r src/ -o bandit-results.txt -f txt --severity-level low || true  # Continue on error

      # Check if Bandit output contains Medium or High severity issues
      - name: Fail if Bandit finds issues
        run: |
          if grep -E "LOW|MEDIUM|HIGH" bandit-results.txt; then
            echo "Medium or High severity issues found in Bandit scan!"
            exit 1
          fi          
      
      # Install Yamllint for YAML validation
      - name: Install Yamllint
        run: |
          sudo apt-get install -y yamllint

      # Run Yamllint to validate DataBrew YAML files and output to a file
      - name: Validate DataBrew YAML files with Yamllint
        run: |
          yamllint ./path-to-your-yaml-files/*.yaml > yamllint-results.txt || true

      # Fail if Yamllint has errors (ignoring warnings)
      - name: Fail if Yamllint finds critical errors
        run: |
          if grep -E "error" yamllint-results.txt; then
            echo "Critical YAML issues found!"
            exit 1
          fi
          
      # Install npm (to install jsonlint)
      - name: Install npm
        run: |
          sudo apt-get update
          sudo apt-get install -y npm

      # Install jsonlint using npm
      - name: Install JSONLint
        run: |
          sudo npm install -g jsonlint
          
      # Run JSONLint to validate DataBrew JSON files and output to a file
      - name: Validate DataBrew JSON files with JSONLint
        run: |
          jsonlint ./path-to-your-json-files/*.json > jsonlint-results.txt || true

      # Fail if JSONLint detects errors
      - name: Fail if JSONLint finds issues
        run: |
          if grep -E "Error" jsonlint-results.txt; then
            echo "JSON format errors found!"
            exit 1
          fi
          
      # Upload the results to GitHub as artifacts
      - name: Upload Bandit Results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-results
          path: bandit-results.txt

      - name: Upload Yamllint Results
        uses: actions/upload-artifact@v4
        with:
          name: yamllint-results
          path: yamllint-results.txt

      - name: Upload JSONLint Results
        uses: actions/upload-artifact@v4
        with:
          name: jsonlint-results
          path: jsonlint-results.txt
        
  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: success()

    steps:
      - uses: actions/checkout@v2
      - name: Install zip tool
        uses: montudor/action-zip@v1
      - name: Create Zip file for Lambda function
        run: |
          cd src
          zip -r ../code.zip .
      - name: AWS CLI v2
        uses: imehedi/actions-awscli-v2@latest
        with:
          args: "lambda update-function-code \
            --function-name arn:aws:lambda:us-east-2:211125625532:function:TestFunction \
            --zip-file fileb://code.zip"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-2"
